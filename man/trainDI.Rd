% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trainDI.R
\name{trainDI}
\alias{trainDI}
\title{Dissimilarity Index}
\usage{
trainDI(model = NA, train = NULL, variables = "all", weight = NA, folds = NULL)
}
\arguments{
\item{model}{A train object created with caret used to extract weights from (based on variable importance) as well as cross-validation folds}

\item{train}{A data.frame containing the data used for model training. Only required when no model is given}

\item{variables}{character vector of predictor variables. if "all" then all variables
of the model are used or if no model is given then of the train dataset.}

\item{weight}{A data.frame containing weights for each variable. Only required if no model is given.}

\item{folds}{Numeric or character. Folds for cross validation. E.g. Spatial cluster affiliation for each data point.
Should be used if replicates are present. Only required if no model is given.}
}
\value{
A trainDI object
}
\description{
This function estimates the Dissimilarity Index (DI) of
of spatial prediction models. Predictors can be weighted based on the internal
variable importance of the machine learning algorithm used for model training.
}
\examples{
\dontrun{
library(sf)
library(raster)
library(caret)
library(viridis)
library(latticeExtra)
library(ggplot2)

# prepare sample data:
dat <- get(load(system.file("extdata","Cookfarm.RData",package="CAST")))
dat <- aggregate(dat[,c("VW","Easting","Northing")],by=list(as.character(dat$SOURCEID)),mean)
pts <- st_as_sf(dat,coords=c("Easting","Northing"))
pts$ID <- 1:nrow(pts)
set.seed(100)
pts <- pts[1:30,]
studyArea <- stack(system.file("extdata","predictors_2012-03-25.grd",package="CAST"))[[1:8]]
trainDat <- extract(studyArea,pts,df=TRUE)
trainDat <- merge(trainDat,pts,by.x="ID",by.y="ID")

# visualize data spatially:
spplot(scale(studyArea))
plot(studyArea$DEM)
plot(pts[,1],add=TRUE,col="black")

# train a model:
set.seed(100)
variables <- c("DEM","NDRE.Sd","TWI")
model <- train(trainDat[,which(names(trainDat)\%in\%variables)],
trainDat$VW, method="rf", importance=TRUE, tuneLength=1,
trControl=trainControl(method="cv",number=5,savePredictions=T))
print(model) #note that this is a quite poor prediction model
prediction <- predict(studyArea,model)
plot(varImp(model,scale=FALSE))

#...then calculate the DI of the trained model:
DI = trainDI(model=model)
plot(DI)

# the DI can now be used to compute the AOA:
AOA = aoa(studyArea, model = model, trainDI = DI)
print(AOA)
plot(AOA)
}

}
\references{
Meyer, H., Pebesma, E. (2020): Predicting into unknown space?
Estimating the area of applicability of spatial prediction models.
\url{https://arxiv.org/abs/2005.07939}
}
\seealso{
\code{\link{aoa}}
}
\author{
Hanna Meyer, Marvin Ludwig
}
